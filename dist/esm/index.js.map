{"version":3,"file":"index.js","sources":["../../src/CanvasFill.ts","../../src/AddMarkerImage.ts","../../src/loader.ts"],"sourcesContent":["import {type Map as MapLibreMap} from 'maplibre-gl';\r\n/**\r\n * Options for the creation of the canvas fill image.\r\n * @typedef {Object} fillOptions\r\n * @property {string} [backGroundColor='rgba(0,0,0,0)'] - The background color of the image.\r\n * @property {integer} [size=512] - The size of the image.\r\n * @property {integer} [factor=16] - The factor of the lines.\r\n * @property {boolean} [keepRepainting=false] - If true, the image will be repainted on every map repaint.\r\n * @property {Array.<lineOptions>} lines - The lines to be drawn on the image.\r\n */\r\ndeclare type fillOptions = {\r\n    backGroundColor?: string;\r\n    size?: number;\r\n    factor?: number;\r\n    keepRepainting?: boolean;\r\n    lines: Array<lineOptions>;\r\n};\r\n\r\n/**\r\n * @typedef {Object} lineOptions\r\n * @property {string} color - The color of the line.\r\n * @property {integer} [width=1] - The width of the line.\r\n * @property {lineType} type - The type of the line.\r\n * @property {integer} [factor=16] - The factor of the lines.\r\n * @property {integer} [size=512] - The size of the image.\r\n * @property {string} [lineCap='square'] - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n */\r\ndeclare type lineOptions = {\r\n    color: string;\r\n    width?: number;\r\n    type: string|lineType;\r\n    lineCap?: string;\r\n    factor?: number;\r\n    size?: number;\r\n};\r\n\r\n/**\r\n * @typedef {(LineTypeCross|LineTypeDiagonalCross|LineTypeForwardSlash|LineTypeBackSlash|LineTypeHorizontal|LineTypeVertical)} lineType\r\n */\r\ndeclare type lineType = LineTypeCross | LineTypeDiagonalCross | LineTypeForwardSlash | LineTypeBackSlash | LineTypeHorizontal | LineTypeVertical;\r\n\r\n/**\r\n * @typedef {('esriSFSBackwardDiagonal'|'ForwardSlash'|'/')} LineTypeForwardSlash - Lines drawn as a forward slash (from bottom left to top right)\r\n */\r\ndeclare type LineTypeForwardSlash = 'esriSFSForwardDiagonal' | 'ForwardSlash' | '/';\r\n\r\n/**\r\n * @typedef {('esriSFSForwardDiagonal'|'Backslash'|'\\\\')} LineTypeBackSlash - Lines drawn as a backslash (from top left to bottom right)\r\n */\r\ndeclare type LineTypeBackSlash = 'esriSFSBackwardDiagonal' | 'Backslash' | '\\\\';\r\n\r\n/**\r\n * @typedef {('esriSFSCross'|'cross'|'+')} LineTypeCross - Lines drawn as a cross (horizontal and vertical lines)\r\n */\r\ndeclare type LineTypeCross = 'esriSFSCross' | 'cross' | '+';\r\n\r\n/**\r\n * @typedef {('esriSFSHorizontal'|'Horizontal'|'-')} LineTypeHorizontal - Lines drawn as a horizontal line\r\n */\r\ndeclare type LineTypeHorizontal = 'esriSFSHorizontal' | 'Horizontal' | '-';\r\n\r\n/**\r\n * @typedef {('esriSFSVertical'|'Vertical'|'|')} LineTypeVertical - Lines drawn as a vertical line\r\n */\r\ndeclare type LineTypeVertical = 'esriSFSVertical' | 'Vertical' | '|';\r\n\r\n/**\r\n * @typedef {('esriSFSDiagonalCross'|'x')} LineTypeDiagonalCross - Lines drawn as a diagonal cross (forward and backward slash)\r\n */\r\ndeclare type LineTypeDiagonalCross = 'esriSFSDiagonalCross' | 'x';\r\n\r\n/**\r\n * @typedef {('esriSFSBackwardDiagonal'|'esriSFSForwardDiagonal'|'esriSFSCross'|'esriSFSHorizontal'|'esriSFSVertical'|'esriSFSDiagonalCross')} esriLineType - Line types as defined by esri Simple Fill Symbols (SFS).\r\n * @see {@link https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-SimpleFillSymbol.html#style esri Simple Fill Symbols (SFS)}\r\n */\r\ndeclare type esriLineType = 'esriSFSBackwardDiagonal' | 'esriSFSForwardDiagonal' | 'esriSFSCross' | 'esriSFSHorizontal' | 'esriSFSVertical' | 'esriSFSDiagonalCross';\r\n\r\n/**\r\n * @typedef {(('ForwardSlash'|'/')|('Backslash'|'\\\\')|('cross'|'+')|('Horizontal'|'-')|('Vertical'|'|')|'x')} simpleLineType - Simplified readable line types.\r\n */\r\ndeclare type simpleLineType = 'ForwardSlash' | '/' | 'Backslash' | '\\\\' | 'cross' | '+' | 'Horizontal' | '-' | 'Vertical' | '|' | 'x';\r\n\r\n/**\r\n * @callback createCanvasFillCallback\r\n * @param {Object} image - The image created by createCanvasFill.\r\n */\r\ndeclare type createCanvasFillCallback = (image:Object) => void;\r\n\r\n/**\r\n * Creates a canvas fill image and adds it to the map.\r\n * @class\r\n * @example\r\n * // Create a canvas fill image with a black cross over a blue backgroundand add it to the map.\r\n * map.addImage('Cross',  new canvasFill( {\r\n *    size: 512,\r\n *    backGroundColor: 'rgba(20,20,255,0.5)',\r\n *    factor: 64,\r\n *    lines: [\r\n *      {color:'rgba(0,0,0,255)',type:'esriSFSCross',width:4}\r\n *   ]\r\n * }))\r\n * \r\n * // Create a canvas fill image with a green X over a red background add it to the map.\r\n * map.addImage('DiagonalCross',  new canvasFill( {\r\n *   size: 512,\r\n *   backGroundColor: 'rgba(20,255,20,1)',\r\n *   factor: 64,\r\n *   lines: [\r\n *    {color:'rgba(255,0,0,255)',type:'esriSFSDiagonalCross',width:3}\r\n *   ]\r\n * }))\r\n * \r\n */\r\nexport class canvasFill{\r\n\r\n    params!: Object;\r\n    fillOptions!: fillOptions;\r\n    keepRepainting!: boolean;\r\n    backGroundColor!: string;\r\n    size!: number;\r\n    factor!: number;\r\n    width!: number;\r\n    height!: number;\r\n    data!: Uint8ClampedArray;\r\n    lines!: Array<lineOptions>;\r\n    _map!: MapLibreMap;\r\n    context!: CanvasRenderingContext2D;\r\n\r\n\r\n    /**\r\n     * @param {Object} params - The parameters of the canvas fill image.\r\n     * @param {Array<lineOptions>} params.lines - The lines options.\r\n     * @param {createCanvasFillCallback} callback - The callback function to be called after the image is created.\r\n     */\r\n    constructor(params:fillOptions,callback?:createCanvasFillCallback){\r\n        try {\r\n    \r\n            if ( !params) throw new Error('fillOptions must be supplied as parameters')\r\n      \r\n            this.fillOptions = params\r\n            this.keepRepainting = this.fillOptions.keepRepainting || false;\r\n\r\n            this.backGroundColor = this.fillOptions.backGroundColor || 'rgba(0,0,0,0)';\r\n            this.size = this.fillOptions.size || 512;\r\n            this.factor = this.fillOptions.factor || 16;\r\n\r\n            this.width = this.size;\r\n            this.height = this.size;\r\n            this.data = new Uint8ClampedArray(this.size * this.size * 4);\r\n\r\n            if(!this.fillOptions.lines) throw new Error('lines must be supplied as a parameter')\r\n            if(!Array.isArray(this.fillOptions.lines)) throw new Error('lines must be an array')\r\n            if(this.fillOptions.lines.length == 0) throw new Error('lines must have at least one line')\r\n\r\n            this.lines = this.fillOptions.lines || [{color:'rgba(0,0,0,255)',type:'esriSFSBackwardDiagonal',width:1}];\r\n            \r\n        \r\n            //let image = createCanvasFillImage(fillOptions, this._map)\r\n            if(callback && typeof callback === \"function\"){\r\n                callback(this)\r\n                }\r\n            //return image\r\n        } catch (error) {\r\n            console.error(\"Error creating fill image\")\r\n            console.error(error)\r\n        }\r\n\r\n    }\r\n\r\n    onAdd(map: MapLibreMap) {\r\n        try{\r\n            this._map = map;\r\n            let canvas = document.createElement('canvas')\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n            this.context = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        }catch (error) {\r\n            console.error(\"Error adding canvas to map\")\r\n            console.error(error)\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        //this.context;\r\n\r\n        // Clear the canvas\r\n        this.context.clearRect(0, 0, this.width, this.height);\r\n\r\n        // Paint the backgorund\r\n        this.context.fillStyle = this.backGroundColor;\r\n        this.context.fillRect(0,0, this.width,this.height);\r\n\r\n        // Draw the lines\r\n        this.drawLines()\r\n\r\n        // update the image's data with data from the canvas\r\n        this.data = new Uint8ClampedArray(this.context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n        ).data);\r\n\r\n        if(this._map && this._map.triggerRepaint && this.keepRepainting){\r\n            this._map.triggerRepaint();\r\n        }\r\n\r\n        // return `true` to let the map know that the image was updated\r\n        return true;\r\n    }\r\n\r\n    drawLines(){\r\n        let context = this.context;\r\n        try {\r\n            for(let i=0;i<this.lines.length;i++){\r\n                let line = this.lines[i]\r\n                line.factor = line.factor || this.factor;\r\n                line.size = line.size || this.size;\r\n                line.width = line.width || 1;\r\n                line.lineCap = line.lineCap || 'square';\r\n                const lineType = this.checklineType(line.type)\r\n            \r\n                switch(lineType){\r\n                    case 'LineTypeBackSlash':\r\n                        canvasDrawForwardDiagonalLine(context,line.color,line.width,line.size,line.lineCap, this.width,this.height,line.factor)\r\n                        break;\r\n                    case 'LineTypeForwardSlash':\r\n                        canvasDrawBackwardDiagonalLine(context,line.color,line.width,line.size,line.lineCap,this.width,this.height,line.factor)\r\n                        break;\r\n                    case 'LineTypeCross':\r\n                        canvasDrawCross(context,line.color,line.width,line.size,line.lineCap, this.width,this.height,line.factor)\r\n                        break;\r\n                    case 'LineTypeHorizontal':\r\n                        canvasDrawHorizontalLine(context,line.color,line.width,line.size,line.lineCap,this.width,line.factor)\r\n                        break;\r\n                    case 'LineTypeVertical':\r\n                        canvasDrawVerticalLine(context,line.color,line.width,line.size,line.lineCap,this.height,line.factor)\r\n                        break;\r\n                    case 'LineTypeDiagonalCross':\r\n                        canvasDrawForwardDiagonalLine(context,line.color,line.width,line.size,line.lineCap, this.width,this.height,line.factor)\r\n                        canvasDrawBackwardDiagonalLine(context,line.color,line.width,line.size,line.lineCap, this.width,this.height,line.factor)\r\n                        break;\r\n                    default:\r\n                        throw new Error('line type not recognized')\r\n                }\r\n            }\r\n            \r\n        }catch (error) {\r\n            console.error(\"Error drawing lines\")\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} lineType - The line type to be evaluated.\r\n     * @returns {string} - The evaluated line type.\r\n     * @throws {Error} - If the line type is not recognized.\r\n     * @private\r\n     * @example\r\n     * let lineType = checklineType('esriSFSBackwardDiagonal')\r\n     * // returns 'LineTypeBackSlash'\r\n     */\r\n    checklineType(linetype:string){\r\n        try{\r\n            let evaluatedType: string | null = null;\r\n        if(linetype == 'esriSFSBackwardDiagonal' || linetype == 'Backslash' || linetype == '\\\\'){\r\n            evaluatedType = 'LineTypeBackSlash';\r\n        }\r\n        if(linetype == 'esriSFSForwardDiagonal' || linetype == 'ForwardSlash' || linetype == '/'){\r\n            evaluatedType =  'LineTypeForwardSlash';\r\n        }\r\n        if(linetype == 'esriSFSCross' || linetype == 'cross' || linetype == '+'){\r\n            evaluatedType = 'LineTypeCross';\r\n        }\r\n        if(linetype == 'esriSFSHorizontal' || linetype == 'Horizontal' || linetype == '-'){\r\n            evaluatedType =  'LineTypeHorizontal';\r\n        }\r\n        if(linetype == 'esriSFSVertical' || linetype == 'Vertical' || linetype == '|'){\r\n            evaluatedType =  'LineTypeVertical';\r\n        }\r\n        if(linetype == 'esriSFSDiagonalCross' || linetype == 'x'){\r\n            evaluatedType =  'LineTypeDiagonalCross';\r\n        }\r\n\r\n        if(evaluatedType == null){\r\n            throw new Error(`line type '${linetype}' not recognized`)\r\n        }\r\n        return evaluatedType\r\n        } catch (error) {\r\n            console.error(\"Error while checking line type\")\r\n            console.error(error)\r\n        }\r\n        \r\n    }\r\n        \r\n        \r\n \r\n}\r\n\r\nexport {type simpleLineType, type esriLineType, type LineTypeDiagonalCross, type LineTypeVertical, type LineTypeHorizontal, type LineTypeCross, type LineTypeBackSlash, type LineTypeForwardSlash, type lineType, type lineOptions, type fillOptions, type createCanvasFillCallback};\r\n\r\nexport default canvasFill;\r\n\r\n/**\r\n * Draws a backward diagonal line on a canvas.\r\n * @param {CanvasRenderingContext2D} context - The context of the canvas.\r\n * @param {string} lineColor - The color of the line, A string parsed as {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value CSS color} value.\r\n * @param {number} lineWidth - The width of the line.\r\n * @param {number} size - The size of the image.\r\n * @param {CanvasLineCap} lineCap - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n * @param {integer} width - The width of the image.\r\n * @param {integer} height - The height of the image.\r\n * @param {integer} factor - The factor of the lines.\r\n * @private\r\n */\r\nfunction canvasDrawBackwardDiagonalLine(\r\n    context: CanvasRenderingContext2D,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    size: number,\r\n    lineCap: string | CanvasLineCap,\r\n    width: number,\r\n    height: number,\r\n    factor: number\r\n    ){\r\n    try {\r\n        context.strokeStyle = lineColor;\r\n    context.lineWidth = lineWidth;\r\n\r\n    context.beginPath();\r\n    context.moveTo(width, 0);\r\n    context.lineTo(0, height);\r\n    context.stroke();\r\n    context.lineCap = lineCap as CanvasLineCap;\r\n    let times = size/factor\r\n    for(var i=0;i<times+2;i++){\r\n        context.moveTo(width-(factor*i), 0);\r\n        context.lineTo(-(factor*i), height);\r\n        context.stroke();\r\n\r\n        context.moveTo(width+(factor*i), 0);\r\n        context.lineTo(+(factor*i), height);\r\n        context.stroke();\r\n    }\r\n    } catch (error) {\r\n        console.error(\"Error drawing backward diagonal line\")\r\n        console.error(error)\r\n    }\r\n    \r\n    }\r\n\r\n/**\r\n * Draws a forward diagonal line on a canvas.\r\n * @param {CanvasRenderingContext2D} context - The context of the canvas.\r\n * @param {string} lineColor - The color of the line.\r\n * @param {integer} lineWidth - The width of the line.\r\n * @param {integer} size - The size of the image.\r\n * @param {string} lineCap - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n * @param {integer} width - The width of the image.\r\n * @param {integer} height - The height of the image.\r\n * @param {integer} factor - The factor of the lines.\r\n * @private\r\n */\r\nfunction canvasDrawForwardDiagonalLine(\r\n    context: CanvasRenderingContext2D,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    size: number,\r\n    lineCap: string | CanvasLineCap,\r\n    width: number,\r\n    height: number,\r\n    factor: number\r\n    ){\r\n    try {\r\n        context.strokeStyle = lineColor;\r\n        context.lineWidth = lineWidth;\r\n\r\n        context.beginPath();\r\n        context.moveTo(0, 0)\r\n        context.lineTo(width, height);;\r\n        context.stroke();\r\n        context.lineCap = lineCap as CanvasLineCap;\r\n        let times = size/factor\r\n        for(var i=0;i<times+2;i++){\r\n            context.moveTo(-(factor*i),0 );\r\n            context.lineTo(width-(factor*i), height);\r\n            context.stroke();\r\n\r\n            context.moveTo(+(factor*i), 0);\r\n            context.lineTo(width+(factor*i), height);\r\n            context.stroke();\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error drawing forward diagonal line\")\r\n        console.error(error)\r\n    }\r\n    \r\n    }\r\n\r\n/**\r\n * Draws horizontal and vertical lines on a canvas.\r\n * @param {CanvasRenderingContext2D} context - The context of the canvas.\r\n * @param {string} lineColor - The color of the line.\r\n * @param {integer} lineWidth - The width of the line.\r\n * @param {integer} size - The size of the image.\r\n * @param {string} lineCap - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n * @param {integer} width - The width of the image.\r\n * @param {integer} height - The height of the image.\r\n * @param {integer} factor - The factor of the lines.\r\n * @private\r\n */\r\nfunction canvasDrawCross(\r\n    context: CanvasRenderingContext2D,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    size: number,\r\n    lineCap: string | CanvasLineCap,\r\n    width: number,\r\n    height: number,\r\n    factor: number\r\n    ){\r\n    try {\r\n        context.strokeStyle = lineColor;\r\n        context.lineWidth = lineWidth;\r\n    \r\n        context.beginPath();\r\n        context.moveTo(0, 0);\r\n        context.lineTo(width, 0);\r\n        context.stroke();\r\n    \r\n        context.moveTo(0, 0);\r\n        context.lineTo(0, height);\r\n        context.stroke();\r\n    \r\n        context.lineCap = lineCap as CanvasLineCap;\r\n        let times = size/factor\r\n        for(var i=0;i<times+2;i++){\r\n            context.moveTo(0+(i*factor), 0);\r\n            context.lineTo(0+(i*factor), height);\r\n            context.stroke();\r\n    \r\n            context.moveTo(0, 0+(i*factor));\r\n            context.lineTo(width, 0+(i*factor));\r\n            context.stroke();\r\n            } \r\n    } catch (error) {\r\n        console.error(\"Error drawing cross line\")\r\n        console.error(error)\r\n    }\r\n    \r\n    }\r\n\r\n/**\r\n * Draws a horizontal line on a canvas.\r\n * @param {CanvasRenderingContext2D} context - The context of the canvas.\r\n * @param {string} lineColor - The color of the line.\r\n * @param {integer} lineWidth - The width of the line.\r\n * @param {integer} size - The size of the image.\r\n * @param {string} lineCap - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n * @param {integer} width - The width of the image.\r\n * @param {integer} factor - The factor of the lines.\r\n * @private\r\n */\r\nfunction canvasDrawHorizontalLine(\r\n    context: CanvasRenderingContext2D,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    size: number,\r\n    lineCap: string | CanvasLineCap,\r\n    width: number,\r\n    factor: number\r\n    ){\r\n    try {\r\n        context.strokeStyle = lineColor;\r\n        context.lineWidth = lineWidth;\r\n\r\n        context.beginPath();\r\n        context.moveTo(0, 0);\r\n        context.lineTo(width, 0);\r\n        context.stroke();\r\n\r\n\r\n        context.lineCap = lineCap as CanvasLineCap;\r\n        let times = size/factor\r\n        for(var i=0;i<times+2;i++){\r\n\r\n            context.moveTo(0, 0+(i*factor));\r\n            context.lineTo(width, 0+(i*factor));\r\n            context.stroke();\r\n            }\r\n    } catch (error) {\r\n        console.error(\"Error drawing horizontal line\")\r\n        console.error(error)\r\n    }\r\n    \r\n    }\r\n\r\n/**\r\n * Draws a vertical line on a canvas.\r\n * @param {CanvasRenderingContext2D} context - The context of the canvas.\r\n * @param {string} lineColor - The color of the line.\r\n * @param {integer} lineWidth - The width of the line.\r\n * @param {integer} size - The size of the image.\r\n * @param {string} lineCap - The shape used to draw the end points of lines. Can be one of butt, round, or square. @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap CanvasRenderingContext2D.lineCap}\r\n * @param {integer} height - The height of the image.\r\n * @param {integer} factor - The factor of the lines.\r\n * @private\r\n */\r\nfunction canvasDrawVerticalLine(\r\n    context: CanvasRenderingContext2D,\r\n    lineColor: string,\r\n    lineWidth: number,\r\n    size: number,\r\n    lineCap: string | CanvasLineCap,\r\n    height: number,\r\n    factor: number\r\n    ){\r\n    try {\r\n        context.strokeStyle = lineColor;\r\n        context.lineWidth = lineWidth;\r\n\r\n        context.beginPath();\r\n        context.moveTo(0, 0);\r\n        context.lineTo(0, height);\r\n        context.stroke();\r\n\r\n        context.lineCap = lineCap as CanvasLineCap;\r\n        let times = size/factor\r\n        for(var i=0;i<times+2;i++){\r\n            context.moveTo(0+(i*factor), 0);\r\n            context.lineTo(0+(i*factor), height);\r\n            context.stroke();\r\n\r\n            }\r\n    } catch (error) {\r\n        console.error(\"Error drawing vertical line\")\r\n        console.error(error)\r\n        \r\n    }\r\n    \r\n    }\r\n","//import maplibregl from 'maplibre-gl';\r\nimport {Marker, type MarkerOptions as MapLibreMarkerOptions, \r\n    type Map as MapLibreMap} from 'maplibre-gl';\r\n\r\n\r\n/**\r\n * Exteneds the MapLibre MarkerOptions to include the map property.\r\n * @typedef {Object} ExtendedMarkerOptions\r\n * @extends {MarkerOptions}\r\n * @property {MapLibreMap} map - The map to add the image to.\r\n */\r\ndeclare type ExtendedMarkerOptions = MapLibreMarkerOptions & {\r\n    map: MapLibreMap;\r\n};\r\n\r\nexport {type ExtendedMarkerOptions};\r\n\r\n/**\r\n * Creates an image from a [maplibre.Marker](https://docs.mapbox.com/mapbox-gl-js/api/markers/#marker) and adds it to the map.\r\n * Meant to be used as an added method to the maplibre.Map class.\r\n * @param {string} id - The image id, if id already exists, an error will be thrown.\r\n * @param {ExtendedMarkerOptions} options - The marker creation options.\r\n * @param {Function} callback - The callback function to be called after the image is added to the map.\r\n */\r\nexport function addMarkerImage(id: string ,options:ExtendedMarkerOptions,callback?:Function){\r\n    try {\r\n        let _map = options.map;\r\n        let marker = new Marker(options);\r\n            let svgDoc: SVGSVGElement ;\r\n          if (!options || !options.element) {\r\n              svgDoc = marker._element.firstChild as SVGSVGElement ;// default marker\r\n          }else{\r\n              svgDoc = marker._element as unknown as SVGSVGElement ; // for SVG elements\r\n          }\r\n\r\n        let markerSVG = new XMLSerializer().serializeToString(svgDoc);\r\n        let markerImg = new Image((svgDoc as SVGSVGElement).width.baseVal.value, (svgDoc as SVGSVGElement).height.baseVal.value);\r\n        markerImg.src = 'data:image/svg+xml;base64,' + window.btoa(markerSVG);\r\n      markerImg.decode()\r\n      .then(() => {\r\n        if (!_map.hasImage(id)){\r\n            _map.addImage(id,markerImg);   \r\n        }else{\r\n            throw new Error(`Image with id: \"${id}\" already exists`)\r\n        }\r\n\r\n        if(callback && typeof callback === \"function\"){\r\n            callback()\r\n            }\r\n        })\r\n        .catch((encodingError) => {\r\n            console.error(\"Image Encoding Error\")\r\n            console.error(encodingError)\r\n        });\r\n        \r\n\r\n    } catch (error) {\r\n        console.error(\"Error adding marker image\")\r\n        console.error(error)\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Creates an image from a [maplibre.Marker](https://docs.mapbox.com/mapbox-gl-js/api/markers/#marker) and adds it to a map specified in the options.\r\n * @param {string} id - The image id, if id already exists, an error will be thrown.\r\n * @param {ExtendedMarkerOptions} options - Extended MapLibre marker creation options, a `map` value is also required.\r\n * @param {MapLibreMap} options.map - The map to add the image to.\r\n * @param {Function} callback  - The callback function to be called after the image is added to the map. \r\n*/\r\nexport function addMarkerImageToMap(id: string ,options:ExtendedMarkerOptions,callback?:Function){\r\n    try {\r\n        if(!options.map) throw new Error(\"Map not defined\")\r\n        let map = options.map;\r\n\r\n        let marker = new Marker(options);\r\n        let svgDoc: SVGSVGElement ;\r\n        if (!options || !options.element) {\r\n            svgDoc = marker._element.firstChild as SVGSVGElement ;// default marker\r\n          }else{\r\n              svgDoc = marker._element as unknown as SVGSVGElement ; // for SVG elements\r\n        }\r\n\r\n        let markerSVG = new XMLSerializer().serializeToString(svgDoc);\r\n        let markerImg = new Image(svgDoc.width.baseVal.value,svgDoc.height.baseVal.value);\r\n        markerImg.src = 'data:image/svg+xml;base64,' + window.btoa(markerSVG);\r\n        markerImg.decode()\r\n        .then(() => {\r\n            if (!map.hasImage(id)) map.addImage(id,markerImg);   \r\n\r\n            if(callback){\r\n                callback()\r\n                }\r\n            })\r\n            .catch((encodingError) => {\r\n                console.error(\"Image Encoding Error\")\r\n                console.error(encodingError)\r\n            });\r\n        \r\n\r\n    } catch (error) {\r\n        console.error(\"Error adding marker image\")\r\n        console.error(error)\r\n    }\r\n}\r\n\r\n","import {addMarkerImageToMap, ExtendedMarkerOptions} from './AddMarkerImage';\r\nimport {canvasFill, type fillOptions} from './CanvasFill';\r\nimport {type Map as MapLibreMap, type MarkerOptions as MapLibreMarkerOptions} from 'maplibre-gl';\r\n\r\n\r\n/**\r\n * Define a marker image to be added to the map style.\r\n * Callbacks for individual images are not supported when using the loader.\r\n * @param {string} id - The image id, if id already exists, an error will be thrown.\r\n * @param {ExtendedMarkerOptions} options - The marker creation options.\r\n */\r\ndeclare type MarkerImageOptions = {\r\n    id: string,\r\n    markerOptions?: MapLibreMarkerOptions;\r\n}\r\n\r\n/**\r\n * Define a canvas fill to be added to the map style.\r\n * Callbacks for individual images are not supported when using the loader.\r\n * @param {string} id - The image id, if id already exists, an error will be thrown.\r\n * @param {fillOptions} fillOptions - The fill creation options.\r\n */\r\ndeclare type CanvasFillOptions = {\r\n    id: string,\r\n    fillOptions: fillOptions\r\n}\r\n\r\n/**\r\n * Define the style JSON for MSU symbols.\r\n * @param {Array<CanvasFillOptions>} canvasFills - Array of canvas fill images.\r\n * @param {Array<MarkerImageOptions>} markerImages - Array of marker images.\r\n */\r\ndeclare type ExtendedStyleJSON =  {\r\n    canvasFills ?: Array<CanvasFillOptions>;\r\n    markerImages ?: Array<MarkerImageOptions>;\r\n};\r\n\r\n\r\nexport type {ExtendedStyleJSON as MSUStyleJSON, CanvasFillOptions as StyleCanvasFillOptions, MarkerImageOptions as StyleMarkerImageOptions};\r\n\r\n/**\r\n * Load MSU images to the map style.\r\n * @param {MapLibreMap} map - The map to add the images to.\r\n * @param {ExtendedStyleJSON | string} style - The style JSON containing the images or a URL to returning it. If a URL is provided, the function will fetch the JSON and call itself with the JSON.\r\n * @param {Function} callback - The callback function to be called after the images are added to the map.\r\n */\r\nexport function LoadMSUImages(map:MapLibreMap,style:ExtendedStyleJSON | string, callback?:Function){\r\n    try {\r\n        // If the style is a URL, fetch the JSON and call the function again.\r\n        // This is pretty lazy, but it works.\r\n        if(typeof style === 'string'){\r\n            fetch(style)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                LoadMSUImages(map,data,callback);\r\n            });\r\n            return;\r\n        }\r\n        if(style.canvasFills){\r\n            style.canvasFills.forEach((fill)=>{\r\n                if(!map.hasImage(fill.id)){\r\n                    map.addImage( fill.id, new canvasFill(fill.fillOptions));\r\n                }else{\r\n                    throw new Error(`Image with id: \"${fill.id}\" already exists`)\r\n                }\r\n            })\r\n        }\r\n        if(style.markerImages){\r\n            style.markerImages.forEach((marker)=>{\r\n                let options = marker.markerOptions as ExtendedMarkerOptions;\r\n                if (!options) {\r\n                    options = {map: map}\r\n                }else{\r\n                    options.map = map;\r\n                }\r\n                if(!map.hasImage(marker.id)){\r\n                    addMarkerImageToMap(marker.id,options);\r\n                }else{\r\n                    throw new Error(`Image with id: \"${marker.id}\" already exists`)\r\n                }\r\n            })\r\n            callback && callback();\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error loading MSU images\")\r\n        console.error(error)\r\n        \r\n    }\r\n    \r\n}\r\nexport default LoadMSUImages;"],"names":[],"mappings":"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"}